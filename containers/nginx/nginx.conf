upstream front {
    # コンテナからホスト(Macのネットワークにアクセスするための特殊なドメイン
    # Dockerコンテナ内からDockerホスト（Mac）上の別のサービスにアクセスできるようになる
    server host.docker.internal:3000;
}

upstream back {
    server host.docker.internal:8000;
}
 
server {
    listen       80;
    # コンテナ環境のためlocalhostを指定
    server_name  localhost;
    # Nginxのバージョン情報を非表示にする
    # サーバ情報を隠すことでセキュリティ上のリスクを軽減させる
    server_tokens off;

    # HTTP レスポンスヘッダの Content_Type に付与する文字コード
    charset utf-8;

    # ログ設定
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    client_max_body_size 20M;
    
    # フロントエンドの設定
    location / {
        proxy_pass http://front/;
    }

    # バックエンドAPIの設定
    location /back/ {
        # X-Real-IPヘッダにクライアントのIPアドレスを設定
        proxy_set_header X-Real-IP $remote_addr;
        # X-Forwarded-Hostヘッダにバックエンドのホスト名とポートを指定
        # いらない？
        # proxy_set_header X-Forwarded-Host $host:$server_port;
        # X-Forwarded-Serverヘッダにバックエンドのホスト名を指定
        # 複数のバックエンドサーバーが存在する場合、特定のリクエストがどのバックエンドに転送されたかを識別するのに役立つ
        # 必須ではない？
        # proxy_set_header X-Forwarded-Server $host;
        # プロキシを経由する時に送信元を判別するために利用
        # X-Forwarded-Forヘッダにリクエストを送ったクライアントまたはプロキシのIPアドレスの履歴(リスト)を設定
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # Hostヘッダにクライアントのホスト名(今回だとMacの8000番ポート)を設定
        proxy_set_header Host host.docker.internal:8000;
        # タイムアウトの設定(3600s)、デフォルトは60s
        proxy_read_timeout 3600;
        # 上記の情報のヘッダがMac(正確にいうとDjangoのrunserver)の8000番ポートに転送される
        proxy_pass http://back/;
    }

    location /upload/ {
        proxy_pass http://back/upload/;
    }
    # webpackerの設定
    # upgradeヘッダはプロキシされるフロントエンドのコンテナに渡されないため、
    # クライアントのプロトコルをWebSocketに切り替えるには以下のヘッダを記載する必要がある
    # https://github.com/vercel/next.js/issues/30491
    location /_next/webpack-hmr {
        proxy_pass http://front/_next/webpack-hmr;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

}
